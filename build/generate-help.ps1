$moduleName = "DotNetReleasesPowershell"
$modulePath = Join-Path $PSScriptRoot "../src/$moduleName.psm1"
$outputDir = Join-Path $PSScriptRoot "../docs/commands/"

$commonParameters = @(    
    "Debug",
    "ErrorAction",
    "ErrorVariable",
    "InformationAction",
    "InformationVariable",
    "OutVariable",
    "OutBuffer",
    "PipelineVariable",
    "Verbose",
    "WarningAction",
    "WarningVariable"
)

$scriptName = $MyInvocation.MyCommand.Name

#
# Create ouput directory
#
if (-not (Test-Path $outputDir)) {
    New-Item -ItemType Directory -Path $outputDir > $null
}

#
# (Re)load module
#
if (Get-Module $moduleName) {
    Remove-Module $moduleName
}
Import-Module $modulePath

<#
.SYNOPSIS
    Generates a AsciiDoc file listing all the Commands of the module with links to command documentation.
#>
function generateIndex {

    param(
        [Parameter(Mandatory = $true)][System.Management.Automation.FunctionInfo[]]$commands
    )

    $outputPath = Join-Path $outputDir "README.asc"
    
    $content = @()
    $content += "//"
    $content += "// This file was auto-generated by '$scriptName'"
    $content += "// Do not edit this file manually as changes will be overwritten the next time the script runs"
    $content += "//"
    $content += ""
    $content += "= $ModuleName Commands"
    $content += ""

    foreach ($command in $commands) {

        $content += "* link:$($command.Name).asc[$($command.Name)]"
        $content += ""
    }

    [System.IO.File]::WriteAllLines($outputPath, $content)
}


<#
.SYNOPSIS
    Generates documentation for the specified command as AsciiDoc document.
#>
function generateCommandPage {

    param(
        [Parameter(Mandatory = $true)][System.Management.Automation.FunctionInfo]$command
    )

    $help = Get-Help -Name $command.Name

    function Get-ParameterHelp($parameterName) {
        foreach ($parameterHelp in $help.parameters.parameter) {
            if ($parameterHelp.name -eq $parameterName) {
                return $parameterHelp
            }
        }
    }


    $outputPath = Join-Path $outputDir "$($command.Name).asc"
    $content = @()

    $content += "//"
    $content += "// This file was auto-generated by '$scriptName'"
    $content += "// Do not edit this file manually as changes will be overwritten the next time the script runs"
    $content += "//"
    $content += "= $($command.Name) Command" 
    $content += "" 


    if ($help.Synopsis) {
        $content += $help.Synopsis 
        $content += "" 
    }
    $description = ($help.Description | Out-String).Trim()
    if ($description) {
        $content += "== Description" 
        $content += "" 
        $content += $description 
        $content += "" 
    }

    if ($help.examples.example) {
        
        $exampleNumber = 1

        $content += "== Examples" 
        $content += "" 
        foreach ($example in $help.examples.example) {
            
            $title = $example.title.Trim('-').Trim()
            if (-not $title) {
                $title = "Example $exampleNumber"
            }
            $content += "=== $title" 
            $content += "" 

            $description = ($example.remarks | Out-String).Trim()
            if ($description) {
                $content += $description 
                $content += "" 
            }

            $content += "[source,powershell]" 
            $content += "----" 
            $content += $example.code 
            $content += "----" 
            $content += "" 


            $exampleNumber += 1 
        }

    }


    $parameterSetCount = ($command.ParameterSets | Measure-Object).Count
    $parameterCount = ($command.Parameters | Measure-Object).Count
    
    if ($parameterCount -gt 0) {
        $content += "== Parameters" 
        $content += "" 
        
        if ($parameterSetCount -gt 1) {
            
            foreach ($parameterSet in $command.ParameterSets) {
                $content += "=== Parameter Set ``$($parameterSet.Name)``" 
                $content += "" 
                foreach ($parameter in $parameterSet.Parameters) {
                    if ($commonParameters -contains $parameter.Name) {
                        continue
                    }
                    $content += "==== Parameter ``$($parameter.Name)``" 
                    $content += "" 
                    $parameterHelp = Get-ParameterHelp $parameter.Name
                    if ($parameterHelp.description) {
                        $parameterDescription = ($parameterHelp.description | Out-String).Trim()
                        $content += $parameterDescription 
                        $content += "" 
                    }
                }
            }
        }
        else {
            foreach ($parameter in $command.Parameters.Values) {
                if ($commonParameters -contains $parameter.Name) {
                    continue
                }
                $content += "=== Parameter ``$($parameter.Name)``" 
                $content += "" 

                $parameterHelp = Get-ParameterHelp $parameter.Name
                if ($parameterHelp.description) {
                    $parameterDescription = ($parameterHelp.description | Out-String).Trim()
                    $content += $parameterDescription 
                    $content += "" 
                }
            }
        }
    }

    [System.IO.File]::WriteAllLines($outputPath, $content)
}


$commands = Get-Command -Module $moduleName
generateIndex $commands
foreach ($command in $commands) {
    generateCommandPage $command
}


