= DotNetReleasesPowershell

:url-releases-index: https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json
:url-dotnetcore-releasenotes: https://github.com/dotnet/core/tree/master/release-notes
:url-repo-clone: https://github.com/ap0llo/dotnet-releases-powershell.git
:url-singlefilemodule-raw: https://raw.githubusercontent.com/ap0llo/dotnet-releases-powershell/master/dist/DotNetReleasesPowershell/DotNetReleasesPowershell.psm1
:url-dotnet-install-scripts: https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script
:path-module-relative: ./src/DotNetReleasesPowershell.psm1

Aside from regular Release Notes, information about .NET Core Releases is published as a link:{url-releases-index}[JSON file] (see link:{url-dotnetcore-releasenotes}[.NET Core Release Notes] for details).
DotNetReleasesPowershell is a Powershell module to query information about .NET Core Releases.

== Installation

The easiest way to download/install the module is to clone this repository and then importing `{path-module-relative}`:

[source,powershell]
[subs="attributes"]
----
git clone "{url-repo-clone}"
Import-Module "{path-module-relative}"
----

Alternatively, the module is also available as a single file module that can be downloaded from {url-singlefilemodule-raw} (this will always download the latest version).

== Usage / Examples

=== Release Channels

.NET Core releases are structured into _Release Channels_ (versions developed/maintained in parallel).
To get information about a release, use `Get-DotNetReleaseChannel`:

[source,powershell]
----
# Get all release channels
$channels = Get-DotNetReleaseChannel

# Get information about the .NET Core 3.1 release channel (the current release at the time of writing)
$channel = Get-DotNetReleaseChannel -ChannelVersion 3.1
----

=== Releases

For every _Release Channel_ there are one or more _Releases_.
To retrieve information about releases, use `Get-DotNetReleaseInfo`:

[source,powershell]
----
# Get all releases for a channel
$releasesForChannel = Get-DotNetReleaseInfo -ChannelVersion 3.1

# alternatively, the command can take a channel from the Powershell pipeline
$releasesForChannel = Get-DotNetReleaseChannel -ChannelVersion 3.1 | Get-DotNetReleaseInfo

# Get all releases (from all channels)
$allReleases = Get-DotNetReleaseInfo
----

=== Files

Every release consists of a set of _Files_ that were published for that release.
There are two types of files in a release:

* _Runtime_ files contain the .NET Core runtime required to run application
* _Sdk_ contain the .NET Core SDK required to build applications

To get a list of files, use `Get-DotNetFileInfo`:

[source,powershell]
----
#
# Get information on files for a specific release
#
$release = Get-DotNetReleaseInfo -RelaseVersion 3.1.4
$files = Get-DotNetFileInfo -ReleaseInfo $release

# Get only files that belong to the .NET SDK
$files = Get-DotNetFileInfo -ReleaseInfo $release -PackageType Sdk

# The set of files can also be limited to specific operating systems
$files = Get-DotNetFileInfo -ReleaseInfo $release -RuntimeIdentifier win-x64

#
# Get information on files that beling to a release channel
#
$filesForChannel = Get-DotNetFileInfo -ChannelVersion 3.1

#
# Get information on all files form all .NET Core releases (that's a lot of files)
#
$allFiles = Get-DotNetFileInfo
----

The command `Get-DotNetFile` can download one or more .NET packages.
The files are downloaded to `%TEMP%`.
`Get-DotNetFile` returns one of more instances of `System.IO.FileInfo` representing the downloaded file in disk.

The command can either be used in conjunction with `Get-DotNetFileInfo` or used directly:

[source,powershell]
----
#
# Download all files for a specific release
#
$release = Get-DotNetReleaseInfo -RelaseVersion 3.1.4
$files = Get-DotNetFile -ReleaseInfo $release

#
# Download files represented by file infos
#
$filesInfos = Get-DotNetFileInfo -ReleaseInfo $release -PackageType Sdk -RuntimeIdentifier win-x64
$files = Get-DotNetFileInfo -FileInfo $fileInfos
----

=== Installation

The module also contains a command to install a .NET Core Runtime or SDK package.
The command performs a *machine-wide install* (requires Administrator privileges) and works *only on Windows*.

Scripts that perform non-admin installations that work on multiple platforms are provided by Microsoft.
For details, see link:{url-dotnet-install-scripts}[dotnet-install scripts reference] on Microsoft Docs.

[source, powershell]
----
# Install the .NET SDK 3.1.300
Install-Dotnet -SdkVersion 3.1.300

# Install the .NET Core runtime 3.1.2
Install-DotNet -RelaseVersion "3.1.2" -PackageType "Runtime"  
----

=== Further Reading
A full list of commands and their parameters can be found link:docs/commands/README.asc[here]

